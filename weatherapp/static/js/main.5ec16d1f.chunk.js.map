{"version":3,"sources":["components/images sync /^/.//bg_.*/.jpg$","components/images/bg_amsterdam.jpg","components/images/bg_bangkok.jpg","components/images/bg_barcelona.jpg","components/images/bg_berlin.jpg","components/images/bg_copenhagen.jpg","components/images/bg_delhi.jpg","components/images/bg_dubai.jpg","components/images/bg_hongkong.jpg","components/images/bg_london.jpg","components/images/bg_losangeles.jpg","components/images/bg_madrid.jpg","components/images/bg_melbourne.jpg","components/images/bg_miami.jpg","components/images/bg_mumbai.jpg","components/images/bg_newyorkcity.jpg","components/images/bg_oslo.jpg","components/images/bg_paris.jpg","components/images/bg_rome.jpg","components/images/bg_singapore.jpg","components/images/bg_stockholm.jpg","components/images/bg_sydney.jpg","components/images/bg_tokyo.jpg","components/gfx/weatherapp_logo.svg","pages/nextdays.js","pages/current_weather.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","state","isLoaded","weatherData","city","props","renderObj","weatherDataSet","list","obj","index","key","dt_txt","weather","main","description","tempConversion","testRender","fetch","this","res","json","setState","tempatureC","temp","Math","round","console","log","name","country","Component","time","CurrentTime","floor","Date","now","SunUp","sys","sunrise","SunDown","sunset","feels_like","CurrentTemp","FeelsTemp","WeatherIconNight","citySelection","citydata","data","value","toLowerCase","UpdateFetch","event","trimCity","replace","bodyImg","require","document","body","style","backgroundImage","handleSubmit","bind","target","src","alt","action","onChange","disabled","selected","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ec16d1f.chunk.js","sourcesContent":["var map = {\n\t\"./bg_amsterdam.jpg\": 37,\n\t\"./bg_bangkok.jpg\": 38,\n\t\"./bg_barcelona.jpg\": 39,\n\t\"./bg_berlin.jpg\": 40,\n\t\"./bg_copenhagen.jpg\": 41,\n\t\"./bg_delhi.jpg\": 42,\n\t\"./bg_dubai.jpg\": 43,\n\t\"./bg_hongkong.jpg\": 44,\n\t\"./bg_london.jpg\": 45,\n\t\"./bg_losangeles.jpg\": 46,\n\t\"./bg_madrid.jpg\": 47,\n\t\"./bg_melbourne.jpg\": 48,\n\t\"./bg_miami.jpg\": 49,\n\t\"./bg_mumbai.jpg\": 50,\n\t\"./bg_newyorkcity.jpg\": 51,\n\t\"./bg_oslo.jpg\": 52,\n\t\"./bg_paris.jpg\": 53,\n\t\"./bg_rome.jpg\": 54,\n\t\"./bg_singapore.jpg\": 55,\n\t\"./bg_stockholm.jpg\": 56,\n\t\"./bg_sydney.jpg\": 57,\n\t\"./bg_tokyo.jpg\": 58\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 36;","module.exports = __webpack_public_path__ + \"static/media/bg_amsterdam.57bbf08a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_bangkok.7d28ba0d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_barcelona.14f69a19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_berlin.5e192353.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_copenhagen.cbdac445.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_delhi.4aa31377.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_dubai.999587af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_hongkong.ee1f05a1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_london.ca2a9c4e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_losangeles.5e52eac9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_madrid.6c0f8a1f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_melbourne.6158de32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_miami.5029eb16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_mumbai.ff22b101.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_newyorkcity.79866ccc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_oslo.c0775d85.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_paris.f6aa2908.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_rome.37815f4d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_singapore.c31a365c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_stockholm.a3a1ea18.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_sydney.4c801194.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_tokyo.dcfb1ac7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/weatherapp_logo.a411cda4.svg\";","import React, { Component } from 'react';\nimport { TiWeatherCloudy } from \"react-icons/ti\";\nimport { TiWeatherDownpour } from \"react-icons/ti\";\nimport { TiWeatherSunny } from \"react-icons/ti\";\nimport { TiWeatherShower } from \"react-icons/ti\";\nimport { TiWeatherSnow } from \"react-icons/ti\";\nimport { TiWeatherStormy } from \"react-icons/ti\";\nimport { TiWeatherWindy } from \"react-icons/ti\";\nimport '../prognose_list.css';\n\n\n\nexport default class App extends Component {\n    state = {\n        isLoaded: false,\n        weatherData: [],\n        city: this.props.city,\n    }\n    async componentDidMount() {\n        const res = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${this.state.city}&appid=3342f0dfc12353a66519520a0f7a2f45`);\n        const weather = await res.json();\n    \n        this.setState({ isLoaded: true, weatherData: weather});\n    }\n\n    // winddirection(index) {\n    //     let getWind =  weatherDataSet[obj].wind.deg\n        \n    // }\n\n    tempConversion(index) {\n      let tempatureK = this.state.weatherData.list[index].main.temp;\n      let tempatureC = tempatureK - 273.15;\n      return (\n        <h2>{Math.round(tempatureC)}<span>&#176;C</span></h2>\n      )\n    }\n\n    renderObj = () => { \n        var weatherDataSet = this.state.weatherData.list;\n        // var contentKeys = Object.keys(weatherDataSet);\n        return Object.keys(weatherDataSet).map((obj, index) => {\n            return (\n                <li key={index}>\n                    <div>\n                        <h4>{weatherDataSet[obj].dt_txt}</h4>\n                        <h2>{(() => {\n                                        switch (weatherDataSet[obj].weather[0].main) {\n                                        case \"Clear\": return <TiWeatherSunny/> ;\n                                        case \"Clouds\": return <TiWeatherCloudy/> ;\n                                        case \"Rain\": return <TiWeatherDownpour/> ;\n                                        case \"Drizzle\": return <TiWeatherShower/> ;\n                                        case \"Thunderstorm\": return <TiWeatherStormy/> ;\n                                        case \"Snow\": return <TiWeatherSnow/> ;\n                                        default: return <TiWeatherWindy/>\n                                        }\n                                    })()}</h2>\n                        <p>{weatherDataSet[obj].weather[0].main}</p>\n                        <p>{weatherDataSet[obj].weather[0].description}</p>\n                        {this.tempConversion(obj)}\n                    </div>\n                </li>\n            )\n        })\n        \n    }\n    testRender = () => {\n        var testd = \"test virker\"\n        return (\n            <p>{testd}</p>\n        )\n    }\n\n      \n    render() {\n        var { isLoaded, weatherData } = this.state;\n        console.log(weatherData)\n        // console.log(\"temp\", this.state.weatherData.main.temp)\n        if(!isLoaded) {\n            return (<div>Loading...</div>)\n        } else {\n                return (\n                    <div id=\"wrapper-list\">\n                        <div>\n                            <div id=\"cityname\">\n                                <h1>{weatherData.city.name}<span>, {weatherData.city.country}</span></h1>\n                            </div>\n                        </div>\n                        <div id=\"prognose\">\n                            <ul>\n                                {this.renderObj()}\n                            </ul>\n                        </div>\n                    </div>\n                )};\n    };\n}","import React, { Component } from 'react';\nimport { TiWeatherCloudy } from \"react-icons/ti\";\nimport { TiWeatherDownpour } from \"react-icons/ti\";\nimport { TiWeatherSunny } from \"react-icons/ti\";\nimport { TiWeatherNight } from \"react-icons/ti\";\nimport { TiWeatherShower } from \"react-icons/ti\";\nimport { TiWeatherSnow } from \"react-icons/ti\";\nimport { TiWeatherStormy } from \"react-icons/ti\";\nimport { TiWeatherWindy } from \"react-icons/ti\";\n\n\n\nexport default class App extends Component {\n        state = {\n            isLoaded: false,\n            weatherData: [],\n            city: this.props.city,\n        }\n    async componentDidMount() {\n        const res = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=3342f0dfc12353a66519520a0f7a2f45`);\n        const weather = await res.json();\n      \n        this.setState({ isLoaded: true, weatherData: weather});\n      }\n    \n    WeatherIconNight(time){\n        let CurrentTime = Math.floor(Date.now() / 1000)\n        let SunUp = this.state.weatherData.sys.sunrise\n        let SunDown = this.state.weatherData.sys.sunset\n        if ( SunUp < CurrentTime && SunDown > CurrentTime) {\n        return <TiWeatherSunny/> }else { return <TiWeatherNight/> }\n        // ||\n    }\n\n    CurrentTemp() {\n      let tempatureK = this.state.weatherData.main.temp;\n      let tempatureC = tempatureK - 273.15;\n      return (\n        <h4>{Math.round(tempatureC)}<span>&#176;C</span></h4>\n      )\n    }\n    FeelsTemp() {\n      let tempatureK = this.state.weatherData.main.feels_like;\n      let tempatureC = tempatureK - 273.15;\n      return (\n        <h4>{Math.round(tempatureC)}<span>&#176;C</span></h4>\n      )\n    }\n\n\n    render() {\n        var { isLoaded, weatherData } = this.state;\n        console.log(\"state\", this.state)\n        if(!isLoaded) {\n            return (<div>Loading...</div>)\n        } else {\n                return (\n                    <div id=\"wrapper\">\n                        <div>\n                            <div id=\"cityname\">\n                                <h1>{weatherData.name}<span>, {weatherData.sys.country}</span></h1>\n                            </div>\n                            <div id=\"tempcontainer\">\n                                <div id=\"currenttemp\">\n                                    <p>Tempature</p>\n                                    {this.CurrentTemp()}\n                                </div>\n                                <div id=\"moreinfo\">\n                                    <p>Feels like</p>\n                                    {this.FeelsTemp()}\n                                </div>\n                                <div></div>\n                            </div>\n                        </div>\n                        <div id=\"kindofweather\">\n                            <div id=\"icon\">\n                                <h1>\n                                    {(() => {\n                                        switch (weatherData.weather[0].main) {\n                                        case \"Clear\": return this.WeatherIconNight() ;\n                                        case \"Clouds\": return <TiWeatherCloudy/> ;\n                                        case \"Rain\": return <TiWeatherDownpour/> ;\n                                        case \"Drizzle\": return <TiWeatherShower/> ;\n                                        case \"Thunderstorm\": return <TiWeatherStormy/> ;\n                                        case \"Snow\": return <TiWeatherSnow/> ;\n                                        default: return <TiWeatherWindy/>\n                                        }\n                                    })()}\n                                </h1>\n                            </div>\n                            <div id=\"textinfo\">\n                            <h3>{weatherData.weather[0].main}</h3> \n                            <h4>{weatherData.weather[0].description}</h4> \n                            </div>\n                        </div>\n                    </div>\n                )\n            };\n    };\n}","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport ComingWeather from \"./pages/nextdays\";\nimport CurrentWeather from \"./pages/current_weather\";\nimport citydata from \"./components/json_data/cities.json\"\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        weatherData: [],\n        city: \"copenhagen\",\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n}\n\ncitySelection = () => {\n  return citydata.map((data, index) => {\n      return (\n      <option key={\"city\" + index} value={data.name.toLowerCase()}>{data.name}</option>\n      )\n  }\n  )\n}\n\nUpdateFetch = (event) => {\n  let trimCity = this.state.city.replace(/\\s/g, '');\n  let bodyImg = require(`./components/images/bg_${trimCity}.jpg`);\n  document.body.style.backgroundImage = `url('${bodyImg}')`;\n}\n\nhandleSubmit(event) {\n  this.setState({city: event.target.value }, () => {\n    this.UpdateFetch();\n    console.log(\"new bg\", this.state.city)\n  });\n}\n\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <header>\n            <div>\n              <img src={require(\"./components/gfx/weatherapp_logo.svg\")} alt=\"\"/>\n            </div>\n            <div id=\"changecity\">\n              <form action=\"/\">\n                <select name=\"cities\" onChange={this.handleSubmit}>\n                  <option value=\"\" disabled selected>Select City</option>\n                  {this.citySelection()}\n                </select>\n              </form>\n            </div>\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">Current weather</Link>\n                </li>\n                <li>\n                  <Link to=\"/nextdays\">About us</Link>\n                </li>\n              </ul>\n            </nav>\n          </header>\n         <Switch>\n            <Route exact path=\"/\" component={ (props) => <CurrentWeather {...this.state} /> } />\n            <Route exact path=\"/nextdays\" component={ (props) => <ComingWeather {...this.state} /> } />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}